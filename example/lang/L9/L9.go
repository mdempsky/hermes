// Code generated by Hermes. DO NOT EDIT.

package L9

type terminal int

type (
	AssignedBody struct {
		Names []Symbol
		Body  Expr
	}
	Binding struct {
		Var Symbol
		Val Expr
	}
	Primitive  terminal // from L1
	RecBinding struct {
		Var Symbol
		Val LambdaExpr
	}
	Symbol terminal // from Lsrc
)

type (
	Const interface {
		Datum
		isConst()
	}
	False struct{}
	Int   struct{ X int }
	Nil   struct{}
	True  struct{}
)

type (
	Datum  interface{ isDatum() }
	Pair   struct{ Car, Cdr Datum }
	Vector struct{ List []Datum }
)

type (
	Expr  interface{ isExpr() }
	Apply struct {
		Fun  Expr
		Args []Expr
	}
	Begin struct {
		Init []Expr
		Body Expr
	}
	If  struct{ Cond, Then, Else Expr }
	Let struct {
		Bindings []Binding
		Body     AssignedBody
	}
	LetRec struct {
		Bindings []RecBinding
		Body     Expr
	}
	PrimCall struct {
		Prim Primitive
		Args []Expr
	}
	Quote struct{ X Const }
	Set   struct {
		Var Symbol
		Val Expr
	}
)

type (
	LambdaExpr interface{ isLambdaExpr() }
	Lambda     struct {
		Params []Symbol
		Body   AssignedBody
	}
)

func (False) isConst()       {}
func (False) isDatum()       {}
func (Int) isConst()         {}
func (Int) isDatum()         {}
func (Nil) isConst()         {}
func (Nil) isDatum()         {}
func (True) isConst()        {}
func (True) isDatum()        {}
func (Pair) isDatum()        {}
func (Vector) isDatum()      {}
func (Apply) isExpr()        {}
func (Begin) isExpr()        {}
func (If) isExpr()           {}
func (Let) isExpr()          {}
func (LetRec) isExpr()       {}
func (PrimCall) isExpr()     {}
func (Quote) isExpr()        {}
func (Set) isExpr()          {}
func (Lambda) isLambdaExpr() {}
func (Symbol) isExpr()       {}
