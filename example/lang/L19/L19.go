// Code generated by Hermes. DO NOT EDIT.

package L19

type terminal int

type (
	Binding struct {
		Var Symbol
		Val Value
	}
	Closure struct {
		X Symbol
		L Symbol
		F []Symbol
	}
	EffectPrim    terminal // from L17
	PredicatePrim terminal // from L16
	Primitive     terminal // from L13
	RecBinding    struct {
		Var Symbol
		Val LambdaExpr
	}
	Symbol    terminal // from Lsrc
	ValuePrim terminal // from L17
)

type (
	Const interface {
		Datum
		isConst()
	}
	Int struct{ X int }
	Nil struct{}
)

type (
	Datum  interface{ isDatum() }
	Pair   struct{ Car, Cdr Datum }
	Vector struct{ List []Datum }
)

type (
	Effect      interface{ isEffect() }
	ApplyEffect struct {
		Fun  SimpleExpr
		Args []SimpleExpr
	}
	BeginEffect struct {
		Init []Effect
		X    Effect
	}
	IfEffect struct {
		Cond       Predicate
		Then, Else Effect
	}
	Nop        struct{}
	PrimEffect struct {
		Prim EffectPrim
		Args []SimpleExpr
	}
	Set struct {
		Lhs Symbol
		Rhs Rhs
	}
)

type (
	LabelsBody interface{ isLabelsBody() }
)

type (
	LambdaExpr interface{ isLambdaExpr() }
	Lambda     struct {
		Params, Locals []Symbol
		Body           Value
	}
)

type (
	Predicate interface{ isPredicate() }
	BeginPred struct {
		Init []Effect
		X    Predicate
	}
	False    struct{}
	IfPred   struct{ Cond, Then, Else Predicate }
	PrimPred struct {
		Prim PredicatePrim
		Args []SimpleExpr
	}
	True struct{}
)

type (
	Program interface{ isProgram() }
	Labels  struct {
		Bindings []RecBinding
		Entry    Symbol
	}
)

type (
	Rhs interface {
		Value
		isRhs()
	}
	Alloc struct {
		Tag  int64
		Size SimpleExpr
	}
	ApplyValue struct {
		Fun  SimpleExpr
		Args []SimpleExpr
	}
	PrimValue struct {
		Prim ValuePrim
		Args []SimpleExpr
	}
)

type (
	SimpleExpr interface {
		Rhs
		Value
		isSimpleExpr()
	}
	Label struct{ Name Symbol }
	Quote struct{ X Const }
)

type (
	Value      interface{ isValue() }
	BeginValue struct {
		Init []Effect
		X    Value
	}
	IfValue struct {
		Cond       Predicate
		Then, Else Value
	}
)

func (Int) isConst()           {}
func (Int) isDatum()           {}
func (Nil) isConst()           {}
func (Nil) isDatum()           {}
func (Pair) isDatum()          {}
func (Vector) isDatum()        {}
func (ApplyEffect) isEffect()  {}
func (BeginEffect) isEffect()  {}
func (IfEffect) isEffect()     {}
func (Nop) isEffect()          {}
func (PrimEffect) isEffect()   {}
func (Set) isEffect()          {}
func (Lambda) isLambdaExpr()   {}
func (BeginPred) isPredicate() {}
func (False) isPredicate()     {}
func (IfPred) isPredicate()    {}
func (PrimPred) isPredicate()  {}
func (True) isPredicate()      {}
func (Labels) isProgram()      {}
func (Alloc) isRhs()           {}
func (Alloc) isValue()         {}
func (ApplyValue) isRhs()      {}
func (ApplyValue) isValue()    {}
func (PrimValue) isRhs()       {}
func (PrimValue) isValue()     {}
func (Label) isRhs()           {}
func (Label) isSimpleExpr()    {}
func (Label) isValue()         {}
func (Quote) isRhs()           {}
func (Quote) isSimpleExpr()    {}
func (Quote) isValue()         {}
func (Symbol) isRhs()          {}
func (Symbol) isSimpleExpr()   {}
func (Symbol) isValue()        {}
func (BeginValue) isValue()    {}
func (IfValue) isValue()       {}
