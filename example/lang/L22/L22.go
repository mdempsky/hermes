// Code generated by Hermes. DO NOT EDIT.

package L22

type terminal int

type (
	Binding struct {
		Var Symbol
		Val Value
	}
	Closure struct {
		X Symbol
		L Symbol
		F []Symbol
	}
	EffectPrim    terminal // from L17
	PredicatePrim terminal // from L16
	Primitive     terminal // from L13
	RecBinding    struct {
		Var Symbol
		Val LambdaExpr
	}
	Symbol    terminal // from Lsrc
	ValuePrim terminal // from L17
)

type (
	Const interface{ isConst() }
	Nil   struct{}
)

type (
	Effect      interface{ isEffect() }
	ApplyEffect struct {
		Fun  SimpleExpr
		Args []SimpleExpr
	}
	BeginEffect struct {
		Init []Effect
		X    Effect
	}
	IfEffect struct {
		Cond       Predicate
		Then, Else Effect
	}
	MSet struct {
		Ptr    SimpleExpr
		Index  *SimpleExpr
		Offset int64
		Data   SimpleExpr
	}
	Nop struct{}
	Set struct {
		Lhs Symbol
		Rhs Rhs
	}
)

type (
	LabelsBody interface{ isLabelsBody() }
)

type (
	LambdaExpr interface{ isLambdaExpr() }
	Lambda     struct {
		Params, Locals []Symbol
		Body           Value
	}
)

type (
	Predicate interface{ isPredicate() }
	BeginPred struct {
		Init []Effect
		X    Predicate
	}
	Eql    struct{ X, Y SimpleExpr }
	False  struct{}
	IfPred struct{ Cond, Then, Else Predicate }
	Leq    struct{ X, Y SimpleExpr }
	Lss    struct{ X, Y SimpleExpr }
	True   struct{}
)

type (
	Program interface{ isProgram() }
	Labels  struct {
		Bindings []RecBinding
		Entry    Symbol
	}
)

type (
	Rhs interface {
		Value
		isRhs()
	}
	Alloc struct {
		Tag  int64
		Size SimpleExpr
	}
	ApplyValue struct {
		Fun  SimpleExpr
		Args []SimpleExpr
	}
)

type (
	SimpleExpr interface {
		Rhs
		Value
		isSimpleExpr()
	}
	Add        struct{ X, Y SimpleExpr }
	Divide     struct{ X, Y SimpleExpr }
	Int        struct{ Int int64 }
	Label      struct{ Name Symbol }
	LogicalAnd struct{ X, Y SimpleExpr }
	MRef       struct {
		Ptr    SimpleExpr
		Index  *SimpleExpr
		Offset int64
	}
	Multiple   struct{ X, Y SimpleExpr }
	ShiftLeft  struct{ X, Y SimpleExpr }
	ShiftRight struct{ X, Y SimpleExpr }
	Subtract   struct{ X, Y SimpleExpr }
)

type (
	Value      interface{ isValue() }
	BeginValue struct {
		Init []Effect
		X    Value
	}
	IfValue struct {
		Cond       Predicate
		Then, Else Value
	}
)

func (Nil) isConst()             {}
func (ApplyEffect) isEffect()    {}
func (BeginEffect) isEffect()    {}
func (IfEffect) isEffect()       {}
func (MSet) isEffect()           {}
func (Nop) isEffect()            {}
func (Set) isEffect()            {}
func (Lambda) isLambdaExpr()     {}
func (BeginPred) isPredicate()   {}
func (Eql) isPredicate()         {}
func (False) isPredicate()       {}
func (IfPred) isPredicate()      {}
func (Leq) isPredicate()         {}
func (Lss) isPredicate()         {}
func (True) isPredicate()        {}
func (Labels) isProgram()        {}
func (Alloc) isRhs()             {}
func (Alloc) isValue()           {}
func (ApplyValue) isRhs()        {}
func (ApplyValue) isValue()      {}
func (Add) isRhs()               {}
func (Add) isSimpleExpr()        {}
func (Add) isValue()             {}
func (Divide) isRhs()            {}
func (Divide) isSimpleExpr()     {}
func (Divide) isValue()          {}
func (Int) isRhs()               {}
func (Int) isSimpleExpr()        {}
func (Int) isValue()             {}
func (Label) isRhs()             {}
func (Label) isSimpleExpr()      {}
func (Label) isValue()           {}
func (LogicalAnd) isRhs()        {}
func (LogicalAnd) isSimpleExpr() {}
func (LogicalAnd) isValue()      {}
func (MRef) isRhs()              {}
func (MRef) isSimpleExpr()       {}
func (MRef) isValue()            {}
func (Multiple) isRhs()          {}
func (Multiple) isSimpleExpr()   {}
func (Multiple) isValue()        {}
func (ShiftLeft) isRhs()         {}
func (ShiftLeft) isSimpleExpr()  {}
func (ShiftLeft) isValue()       {}
func (ShiftRight) isRhs()        {}
func (ShiftRight) isSimpleExpr() {}
func (ShiftRight) isValue()      {}
func (Subtract) isRhs()          {}
func (Subtract) isSimpleExpr()   {}
func (Subtract) isValue()        {}
func (Symbol) isRhs()            {}
func (Symbol) isSimpleExpr()     {}
func (Symbol) isValue()          {}
func (BeginValue) isValue()      {}
func (IfValue) isValue()         {}
